<?php

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly
}

if ( ! class_exists( 'Sandbox_Settings_Expiration', false ) ) :

/**
 * Sandbox_Settings_Expiration.
 */
class Sandbox_Settings_Expiration extends Sandbox_Settings_Page {

    /**
     *  Sandbox migration data key
     */
    const SANDBOX_MIGRATION_OPTION = 'sandbox_migration';

	/**
	 * Constructor.
	 */
	public function __construct() {
		$this->id    = 'expiration';
		$this->label = __( 'Expiration', 'sandbox' );

		parent::__construct();
	}

    /**
     *  Expiration page notice text
     */
    public function get_upgrade_text(){
        $upgradeText = __('Set Expiration Dates, Instantly Duplicate Installs, & More', 'sandbox');
        if (!empty(Sandbox::getInstance()->server_data['license']) && Sandbox::getInstance()->server_data['license']['plan_name'] == Sandbox::FREE_TRIAL_PLAN) {
            $upgradeText = sprintf(__('In %d days your installs will be moved to poopy.life'), Sandbox::getInstance()->getFreeTrialDaysLeft());
        }
        echo $upgradeText;
    }

	/**
	 * Save settings.
	 */
	public function save() {

        if ( ! empty($_POST['sandbox_expiration_settings']) ){

            check_admin_referer('sandbox-settings');

            if (!$this->errors->get_error_codes()) { // no validation errors detected

                // create sandbox template
                if (isset($_POST['save'])) {
                    if (!empty($_POST['is_set_sandbox_expiration_date'])) {
                        switch ($_POST['is_set_sandbox_expiration_date']) {
                            case 'yes':
                                $result = Sandbox_API::getInstance()
                                    ->sandbox_set_expiration_date(strtotime('+1 week'));
                                if (!empty($result['error'])) {
                                    Sandbox_Admin_Settings::add_error($result['error']);
                                }
                                break;
                            case 'no':
                                $result = Sandbox_API::getInstance()
                                    ->sandbox_keep_alive();
                                if (!empty($result['error'])) {
                                    Sandbox_Admin_Settings::add_error($result['error']);
                                }
                                break;
                            default;
                                break;
                        }
                        delete_transient(Sandbox_API::EXPIRATION_DATE_TRANSIENT);
                        delete_transient(Sandbox_API::SERVER_DATA_TRANSIENT);
                    }
                }

                // migrate sandbox
                if (isset($_POST['migrate'])) {
                    if (empty($_POST['sandbox_license'])){
                        Sandbox_Admin_Settings::add_error(__('Sandbox license required.'));
                    }
                    else{
                        $sandbox_settings = get_option('sandbox_settings', array());
                        // create/update sandbox template
                        $is_update = empty($sandbox_settings) ? false : true;
                        $result = Sandbox_API::getInstance()->sandbox_create_template($is_update);
                        if (empty($result['error'])){
                            // create new install on pro domain
                            $result = Sandbox_API::getInstance()->sandbox_migrate($_POST['sandbox_license']);
                            if (!empty($result['error'])) {
                                Sandbox_Admin_Settings::add_error($result['error']);
                            }
                            else{
                                delete_transient(Sandbox_API::SERVER_DATA_TRANSIENT);
                                update_option(self::SANDBOX_MIGRATION_OPTION, $result);
                            }
                        }
                    }
                }
            }
        }
	}

    /**
     *  Render expiration page
     */
    public function output() {

        $this->sandbox_migration = get_option(self::SANDBOX_MIGRATION_OPTION, false);

        Sandbox::getInstance()->server_data = Sandbox_API::getInstance()->get_sandbox_data();

        parent::output(); // TODO: Change the autogenerated stub
    }

}

endif;

return new Sandbox_Settings_Expiration();
